import itertools
import time
import threading
import psutil

# Sample dictionary words (replace with a larger dictionary file)
dictionary = ["animal", "beautiful", "dog", "hospital", "apple", "boy", "india"]

# Output file
output_file = "passwords.txt"

# Character replacements for various conditions
replacements_step_4 = {'a': '@', 'o': '0', 'i': '1', 's': '5'}
replacements_step_5 = {'o': '0'}
replacements_step_6 = {'i': '1'}
replacements_step_7 = {'i': '!'}
replacements_step_8 = {'s': '5'}
replacements_step_9 = {'a': '@', 'o': '0', 'i': '1', 's': '5'}

# CPU and GPU usage limits (for simulation, as native Python can't directly manage GPU)
MAX_CPU_USAGE = 60  # In percentage
MAX_GPU_USAGE = 75  # Dummy value, actual usage requires a GPU management library (e.g., PyTorch)

# Function to capitalize the first letter of a word
def capitalize_first_letter(word):
    return word.capitalize()

# Function to replace characters based on specific rules
def replace_chars(word, replacements):
    for old, new in replacements.items():
        word = word.replace(old, new)
    return word

# Monitor CPU usage to ensure it's within the defined threshold
def monitor_cpu_usage():
    while True:
        cpu_usage = psutil.cpu_percent(interval=1)
        if cpu_usage > MAX_CPU_USAGE:
            print(f"CPU usage too high: {cpu_usage}%. Pausing for a bit to reduce load.")
            time.sleep(2)  # Throttle the CPU by sleeping
        time.sleep(0.1)  # Short sleep between checks

# Write all passwords to a file in chunks
def write_to_file(words, file_name):
    try:
        with open(file_name, 'a') as f:  # Append mode
            for word in words:
                f.write(f"{word}\n")
    except Exception as e:
        print(f"Error writing to file: {str(e)}")

# Generate all combinations of characters and numbers with separators
def generate_numbered_words(base_words, digit_length, separators):
    new_words = set()
    for word in base_words:
        for digits in itertools.product(range(10), repeat=digit_length):
            digit_str = ''.join(map(str, digits))
            for sep in separators:
                new_word = f"{word}{sep}{digit_str}"
                print(f"Generated: {new_word}")  # Print to terminal as it's generated
                new_words.add(new_word)
    return new_words

# Generate and return passwords based on all specified steps
def generate_passwords():
    try:
        all_words = set()

        # Step 1: Capitalized words and Step 2: Lowercase words
        capitalized_words = {capitalize_first_letter(word) for word in dictionary}
        lowercase_words = {word.lower() for word in dictionary}

        all_words.update(capitalized_words)
        all_words.update(lowercase_words)

        # Step 3: Generate permutations of alphabet (length 4 to 12)
        alphabet = 'abcdefghijklmnopqrstuvwxyz'
        for length in range(4, 13):  # Lengths from 4 to 12
            for combination in itertools.permutations(alphabet, length):
                word = ''.join(combination)
                if capitalize_first_letter(word) not in capitalized_words:  # Ignore if already exists
                    print(f"Generated permutation: {capitalize_first_letter(word)}")  # Print to terminal
                    all_words.add(capitalize_first_letter(word))

        # Steps 4-9: Character replacements
        replaced_words = set()
        for word in all_words:
            # Step 4-8 replacements with logging
            replaced_word_4 = replace_chars(word, replacements_step_4)
            replaced_words.add(replaced_word_4)
            replaced_word_5 = replace_chars(word, replacements_step_5)
            replaced_words.add(replaced_word_5)
            replaced_word_6 = replace_chars(word, replacements_step_6)
            replaced_words.add(replaced_word_6)
            replaced_word_7 = replace_chars(word, replacements_step_7)
            replaced_words.add(replaced_word_7)
            replaced_word_8 = replace_chars(word, replacements_step_8)
            replaced_words.add(replaced_word_8)

        all_words.update(replaced_words)

        # Step 9: Additional replacements
        final_words = set()
        for word in all_words:
            replaced_word_9 = replace_chars(word, replacements_step_9)
            print(f"Final replacement: {replaced_word_9}")  # Print final step
            final_words.add(replaced_word_9)

        # Step 10-13: Generate numbered words with separators
        separators = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=', '[', ']', '{', '}', '|', ';', ':', "'", '"', ',', '.', '<', '>', '/', '?']

        # 4-digit, 3-digit, 2-digit, 1-digit number combinations
        final_words.update(generate_numbered_words(final_words, 4, separators))
        final_words.update(generate_numbered_words(final_words, 3, separators))
        final_words.update(generate_numbered_words(final_words, 2, separators))
        final_words.update(generate_numbered_words(final_words, 1, separators))

        # Step 14: Add '@' symbol and 1-digit number
        for word in final_words:
            for digit in range(10):
                final_word = f"@{word}{digit}"
                print(f"Generated with symbol and digit: {final_word}")
                final_words.add(final_word)

        # Step 15-19: Append numbers of varying lengths to the words
        for length in range(1, 5):  # 1-digit to 4-digit
            for word in final_words:
                for digits in itertools.product(range(10), repeat=length):
                    digit_str = ''.join(map(str, digits))
                    final_word = f"{word}{digit_str}"
                    print(f"Generated with numbers: {final_word}")
                    final_words.add(final_word)

        # Write final words to the file
        write_to_file(final_words, output_file)

    except Exception as e:
        print(f"Error occurred during password generation: {str(e)}")

# Start CPU usage monitoring in a separate thread
cpu_monitor_thread = threading.Thread(target=monitor_cpu_usage, daemon=True)
cpu_monitor_thread.start()

# Execute the password generation
generate_passwords()
